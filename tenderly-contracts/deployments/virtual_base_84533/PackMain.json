{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.20\"},\"sources\":{\"contracts/PackMain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./interfaces/IERC6551Registry.sol\\\";\\nimport \\\"./interfaces/IERC6551Account.sol\\\";\\nimport \\\"./interfaces/IERC6551Executable.sol\\\";\\n\\nimport \\\"./PackNFT.sol\\\";\\nimport \\\"./ClaimData.sol\\\";\\nimport \\\"./lib/SignatureValidator.sol\\\";\\n\\n/**\\n * @title PackMain\\n * @dev This is the primary contract for the Pack protocol. It handles the creation, management, and execution of packs.\\n */\\ncontract PackMain is PackNFT, Ownable {\\n    // ---------- Events ---------------------\\n    /**\\n     * @dev Emitted when a new pack is created\\n     */\\n    event PackCreated(\\n        uint256 indexed tokenId,\\n        address owner,\\n        address[] modules,\\n        bytes[] moduleData\\n    );\\n    /**\\n     * @dev Emitted when a pack is revoked\\n     */\\n    event PackRevoked(uint256 indexed tokenId, address owner);\\n    /**\\n     * @dev Emitted when a pack is opened\\n     */\\n    event PackOpened(uint256 indexed tokenId, address claimer);\\n\\n    // ---------- Errors ---------------------\\n    error InvalidEthValue();\\n    error OnlyOwnerOf(uint256 tokenId);\\n    error TokenNotInExpectedState(uint256 tokenId);\\n    error EtherTransferFailed();\\n    error InvalidRefundValue();\\n    error InvalidAddress();\\n    error InvalidLengthOfData(uint256 modulesLength, uint256 moduleDataLength);\\n    error ModulesNotWhitelisted(address modules);\\n\\n    // ---------- Constants -------------------\\n    uint256 public constant VERSION = 1;\\n    uint256 public constant CALL_OPERATION = 0; // Only call operations are supported for ERC6551\\n\\n    // ---------- ERC6551-related ------------\\n    IERC6551Registry public immutable registry;\\n    address public immutable implementation;\\n    uint256 public immutable registryChainId;\\n    uint256 public immutable salt;\\n\\n    mapping(uint256 => address) public claimPublicKey;\\n    mapping(uint256 => address[]) public packModules;\\n\\n    // Modules whitelist\\n    mapping(address => bool) public modulesWhitelist;\\n\\n    /**\\n     * @dev Initializes the PackMain contract\\n     * @param initialOwner_ The address that will be set as the initial owner of the contract\\n     * @param baseTokenURI_ The base URI that will be used for all token URIs\\n     * @param name_ The name of the NFT token\\n     * @param symbol_ The symbol of the NFT token\\n     * @param registry_ ERC6551 registry contract address\\n     * @param implementation_ ERC6551 implementation contract address\\n     * @param registryChainId_ The chain ID of the network, to prevent cross-chain replay attacks\\n     * @param salt_ A random value used to ensure the uniqueness of the contract's address\\n     * @param modulesWhitelist_ An array of addresses that will be initially whitelisted as valid modules\\n     */\\n    constructor(\\n        address initialOwner_,\\n        string memory baseTokenURI_,\\n        string memory name_,\\n        string memory symbol_,\\n        address registry_,\\n        address implementation_,\\n        uint256 registryChainId_,\\n        uint256 salt_,\\n        address[] memory modulesWhitelist_\\n    ) PackNFT(baseTokenURI_, name_, symbol_) Ownable(initialOwner_) {\\n        // Check that the registry and implementation are not the zero address\\n        if (registry_ == address(0) || implementation_ == address(0)) {\\n            revert InvalidAddress();\\n        }\\n\\n        // Set ERC6551-related params\\n        registry = IERC6551Registry(registry_);\\n        implementation = implementation_;\\n        registryChainId = registryChainId_;\\n        salt = salt_;\\n\\n        // Set the modules whitelist\\n        setModulesWhitelist(modulesWhitelist_, true);\\n    }\\n\\n    /**\\n     * @dev Modifier to check if the sender is the owner of the token\\n     * @param tokenId The ID of the token to check ownership of\\n     */\\n    modifier onlyOwnerOf(uint256 tokenId) {\\n        if (ownerOf(tokenId) != msg.sender) {\\n            revert OnlyOwnerOf(tokenId);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check if the token is in the desired state\\n     * @param tokenId The ID of the token to check the state of\\n     * @param desiredState Struct, the desired state of the token\\n     */\\n    modifier tokenInState(uint256 tokenId, PackState desiredState) {\\n        if (packState[tokenId] != desiredState) {\\n            revert TokenNotInExpectedState(tokenId);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Function to pack a new NFT. This function is responsible for creating a new NFT and assigning it to the owner.\\n     * This function also creates a new account for the NFT and transfers some ETH to the new account.\\n     * Finally, it loops through the modules and executes the data.\\n     * @param to_ The address to which the new NFT will be assigned.\\n     * @param claimPublicKey_ The public key that will be associated with the claim of the new NFT.\\n     * @param modules The modules that will be associated with the new NFT. These modules must be whitelisted.\\n     * @param moduleData The data that the modules will use to execute their logic.\\n     * @notice The ETH sent with this function will be transferred to the new account.\\n     * @notice The modules and moduleData arrays must be the same length.\\n     */\\n    function pack(\\n        address to_,\\n        address claimPublicKey_,\\n        address[] calldata modules,\\n        bytes[] calldata moduleData\\n    ) public payable returns (uint256 tokenId, address newAccount) {\\n        // Check that the modules are whitelisted\\n        for (uint256 i = 0; i < modules.length; i++) {\\n            if (!modulesWhitelist[modules[i]]) {\\n                revert ModulesNotWhitelisted(modules[i]);\\n            }\\n        }\\n        // Need to check that the modules and moduleData are the same length\\n        if (modules.length != moduleData.length) {\\n            revert InvalidLengthOfData(modules.length, moduleData.length);\\n        }\\n        // Pack needs ETH to be minted\\n        if (msg.value == 0) {\\n            revert InvalidEthValue();\\n        }\\n\\n        // Mint the Pack\\n        tokenId = _mintPack(to_);\\n\\n        // Set params\\n        claimPublicKey[tokenId] = claimPublicKey_;\\n        packModules[tokenId] = modules;\\n\\n        // Create the account for the NFT\\n        newAccount = registry.createAccount(\\n            implementation,\\n            registryChainId,\\n            address(this),\\n            tokenId,\\n            salt,\\n            \\\"\\\" // initData\\n        );\\n\\n        // Transfer some ETH to newAccount\\n        (bool successE, ) = payable(newAccount).call{value: msg.value}(\\\"\\\");\\n        if (!successE) {\\n            revert EtherTransferFailed();\\n        }\\n\\n        // Loop through the modules and execute the data\\n        for (uint256 i = 0; i < modules.length; i++) {\\n            Address.functionDelegateCall(\\n                modules[i],\\n                abi.encodeWithSignature(\\n                    \\\"onCreate(uint256,address,bytes)\\\",\\n                    tokenId,\\n                    newAccount,\\n                    moduleData[i]\\n                )\\n            );\\n        }\\n\\n        emit PackCreated(tokenId, to_, modules, moduleData);\\n    }\\n\\n    /**\\n     * @dev This function revokes a pack. It is only callable by the owner of the pack and only if the pack is in the 'Created' state.\\n     * @param tokenId_ The unique identifier of the pack to be revoked.\\n     * @param moduleData The data associated with the pack's modules.\\n     * @notice The moduleData array must be the same length as the modules array.\\n     */\\n    function revoke(\\n        uint256 tokenId_,\\n        bytes[] calldata moduleData\\n    ) public onlyOwnerOf(tokenId_) tokenInState(tokenId_, PackState.Created) {\\n        // Check that the moduleData is the same length as the modules\\n        if (moduleData.length != packModules[tokenId_].length) {\\n            revert InvalidLengthOfData(\\n                packModules[tokenId_].length,\\n                moduleData.length\\n            );\\n        }\\n\\n        _revokePack(tokenId_);\\n\\n        // Send ETH to owner\\n        address payable thisAccount = payable(account(tokenId_));\\n        uint256 value = thisAccount.balance;\\n        _executeTransfer(thisAccount, msg.sender, value);\\n\\n        // Loop through the modules and execute the data\\n        for (uint256 i = 0; i < packModules[tokenId_].length; i++) {\\n            Address.functionDelegateCall(\\n                packModules[tokenId_][i],\\n                abi.encodeWithSignature(\\n                    \\\"onRevoke(uint256,address,bytes)\\\",\\n                    tokenId_,\\n                    thisAccount,\\n                    moduleData[i]\\n                )\\n            );\\n        }\\n\\n        emit PackRevoked(tokenId_, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Function to open a pack\\n     * @param data The data associated with the pack to be opened.\\n     * @param moduleData The data associated with the pack's modules.\\n     * @notice The moduleData array must be the same length as the modules array.\\n     * @notice This is normally sent by a relayer, so the relayer will be refunded the refundValue.\\n     */\\n    function open(\\n        ClaimData memory data,\\n        bytes[] calldata moduleData\\n    ) public tokenInState(data.tokenId, PackState.Created) {\\n        // Checks for valid signatures\\n        _validateSignatures(data);\\n        // Check that the refund value is not greater than the maximum refund value\\n        if (data.refundValue > data.maxRefundValue) {\\n            revert InvalidRefundValue();\\n        }\\n\\n        // Set state to Opened\\n        _openPack(data.tokenId);\\n\\n        // Loop through the modules and execute the data\\n        for (uint256 i = 0; i < packModules[data.tokenId].length; i++) {\\n            Address.functionDelegateCall(\\n                packModules[data.tokenId][i],\\n                abi.encodeWithSignature(\\n                    \\\"onOpen(uint256,address,address,bytes)\\\",\\n                    data.tokenId,\\n                    account(data.tokenId),\\n                    data.claimer,\\n                    moduleData[i]\\n                )\\n            );\\n        }\\n\\n        // Transfer the ETH from the account to the owner and refund the relayer\\n        _transferAndRefund(data);\\n\\n        emit PackOpened(data.tokenId, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Function to set the modules whitelist\\n     * @param modules An array of addresses representing the modules to be whitelisted\\n     * @param value A boolean value indicating whether the modules should be whitelisted (true) or not (false)\\n     * @notice This function can only be called by the owner of the contract\\n     */\\n    function setModulesWhitelist(\\n        address[] memory modules,\\n        bool value\\n    ) public onlyOwner {\\n        for (uint256 i = 0; i < modules.length; i++) {\\n            modulesWhitelist[modules[i]] = value;\\n        }\\n    }\\n\\n    /**\\n     * @dev This function returns the account associated with a specific token.\\n     * @param tokenId The unique identifier of the token whose associated account is to be returned.\\n     * @return Returns the address of the account associated with the given tokenId.\\n     */\\n    function account(uint256 tokenId) public view returns (address) {\\n        return\\n            registry.account(\\n                implementation,\\n                registryChainId,\\n                address(this),\\n                tokenId,\\n                salt\\n            );\\n    }\\n\\n    /**\\n     * @dev This is an internal function that handles the transfer of ETH from the account to the owner and refunds the relayer.\\n     * @param data This is a memory structure that contains all the necessary data for the transfer and refund operation.\\n     */\\n    function _transferAndRefund(ClaimData memory data) internal {\\n        // Refund the relayer\\n        address payable thisAccount = payable(account(data.tokenId));\\n        _executeTransfer(thisAccount, msg.sender, data.refundValue);\\n        // Transfer the rest to the claimer\\n        uint256 value = thisAccount.balance;\\n        _executeTransfer(thisAccount, data.claimer, value);\\n    }\\n\\n    /**\\n     * @dev This is an internal function that is used to execute a transfer operation.\\n     * @param accountAddress The address of the account from which the transfer will be made.\\n     * @param recipient The address of the recipient who will receive the transfer.\\n     * @param value The amount of ETH that will be transferred.\\n     */\\n    function _executeTransfer(\\n        address payable accountAddress,\\n        address recipient,\\n        uint256 value\\n    ) internal {\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"transfer(address,uint256)\\\",\\n            recipient,\\n            value\\n        );\\n\\n        IERC6551Executable(accountAddress).execute(\\n            recipient,\\n            value,\\n            data,\\n            CALL_OPERATION\\n        );\\n    }\\n\\n    /**\\n     * @dev This is an internal function that validates the signatures associated with a claim.\\n     * It uses the SignatureValidator to check the signatures against the claim data, registry chain ID, salt, contract address, and public key associated with the token ID.\\n     * @param data The claim data to validate.\\n     */\\n    function _validateSignatures(ClaimData memory data) internal view {\\n        SignatureValidator.validateSignatures(\\n            data,\\n            registryChainId,\\n            salt,\\n            address(this),\\n            claimPublicKey[data.tokenId]\\n        );\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/interfaces/IERC6551Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC6551Registry {\\n    /**\\n     * @dev The registry SHALL emit the AccountCreated event upon successful account creation\\n     */\\n    event AccountCreated(\\n        address account,\\n        address indexed implementation,\\n        uint256 chainId,\\n        address indexed tokenContract,\\n        uint256 indexed tokenId,\\n        uint256 salt\\n    );\\n\\n    /**\\n     * @dev Creates a token bound account for a non-fungible token\\n     *\\n     * If account has already been created, returns the account address without calling create2\\n     *\\n     * If initData is not empty and account has not yet been created, calls account with\\n     * provided initData after creation\\n     *\\n     * Emits AccountCreated event\\n     *\\n     * @return the address of the account\\n     */\\n    function createAccount(\\n        address implementation,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 seed,\\n        bytes calldata initData\\n    ) external returns (address);\\n\\n    /**\\n     * @dev Returns the computed token bound account address for a non-fungible token\\n     *\\n     * @return The computed address of the token bound account\\n     */\\n    function account(\\n        address implementation,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 salt\\n    ) external view returns (address);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/interfaces/IERC6551Account.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @dev the ERC-165 identifier for this interface is `0x6faff5f1`\\ninterface IERC6551Account {\\n    /**\\n     * @dev Allows the account to receive Ether\\n     *\\n     * Accounts MUST implement a `receive` function\\n     *\\n     * Accounts MAY perform arbitrary logic to restrict conditions\\n     * under which Ether can be received\\n     */\\n    receive() external payable;\\n\\n    /**\\n     * @dev Returns the identifier of the non-fungible token which owns the account\\n     *\\n     * The return value of this function MUST be constant - it MUST NOT change over time\\n     *\\n     * @return chainId       The EIP-155 ID of the chain the token exists on\\n     * @return tokenContract The contract address of the token\\n     * @return tokenId       The ID of the token\\n     */\\n    function token()\\n        external\\n        view\\n        returns (uint256 chainId, address tokenContract, uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a value that SHOULD be modified each time the account changes state\\n     *\\n     * @return The current account state\\n     */\\n    function state() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a magic value indicating whether a given signer is authorized to act on behalf\\n     * of the account\\n     *\\n     * MUST return the bytes4 magic value 0x523e3260 if the given signer is valid\\n     *\\n     * By default, the holder of the non-fungible token the account is bound to MUST be considered\\n     * a valid signer\\n     *\\n     * Accounts MAY implement additional authorization logic which invalidates the holder as a\\n     * signer or grants signing permissions to other non-holder accounts\\n     *\\n     * @param  signer     The address to check signing authorization for\\n     * @param  context    Additional data used to determine whether the signer is valid\\n     * @return magicValue Magic value indicating whether the signer is valid\\n     */\\n    function isValidSigner(\\n        address signer,\\n        bytes calldata context\\n    ) external view returns (bytes4 magicValue);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/interfaces/IERC6551Executable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @dev the ERC-165 identifier for this interface is `0x74420f4c`\\ninterface IERC6551Executable {\\n    /**\\n     * @dev Executes a low-level operation if the caller is a valid signer on the account\\n     *\\n     * Reverts and bubbles up error if operation fails\\n     *\\n     * @param to        The target address of the operation\\n     * @param value     The Ether value to be sent to the target\\n     * @param data      The encoded operation calldata\\n     * @param operation A value indicating the type of operation to perform\\n     *\\n     * Accounts implementing this interface MUST accept the following operation parameter values:\\n     * - 0 = CALL\\n     * - 1 = DELEGATECALL\\n     * - 2 = CREATE\\n     * - 3 = CREATE2\\n     *\\n     * Accounts implementing this interface MAY support additional operations or restrict a signer's\\n     * ability to execute certain operations\\n     *\\n     * @return The result of the operation\\n     */\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        uint256 operation\\n    ) external payable returns (bytes memory);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/ClaimData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ClaimData\\n * @dev Struct for storing claim related data\\n */\\nstruct ClaimData {\\n    uint256 tokenId; // ID of the token\\n    bytes sigOwner; // Signature from the Pack owner\\n    address claimer; // Address of the claimer\\n    bytes sigClaimer; // Signature from the claimer\\n    uint256 refundValue; // Value to refund to the relayer\\n    uint256 maxRefundValue; // Maximum refundable value (to prevent over-refund)\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ECDSA} from \\\"./ECDSA.sol\\\";\\nimport {IERC1271} from \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Safe Wallet (previously Gnosis Safe).\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error, ) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeCall(IERC1271.isValidSignature, (hash, signature))\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/lib/SignatureValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\";\\n\\nimport \\\"../ClaimData.sol\\\";\\n\\nlibrary SignatureValidator {\\n    error InvalidOwnerSignature();\\n    error InvalidClaimerSignature();\\n\\n    function validateSignatures(\\n        ClaimData memory data,\\n        uint256 registryChainId,\\n        uint256 salt,\\n        address addr,\\n        address claimPublicKey\\n    ) internal view returns (bool) {\\n        bytes32 messageHashOwner = MessageHashUtils.toEthSignedMessageHash(\\n            keccak256(\\n                abi.encodePacked(\\n                    data.tokenId,\\n                    data.claimer,\\n                    registryChainId,\\n                    salt,\\n                    addr\\n                )\\n            )\\n        );\\n\\n        if (\\n            !SignatureChecker.isValidSignatureNow(\\n                claimPublicKey,\\n                messageHashOwner,\\n                data.sigOwner\\n            )\\n        ) {\\n            revert InvalidOwnerSignature();\\n        }\\n\\n        bytes32 messageHashClaimer = MessageHashUtils.toEthSignedMessageHash(\\n            keccak256(\\n                abi.encodePacked(\\n                    data.tokenId,\\n                    data.maxRefundValue,\\n                    registryChainId,\\n                    salt,\\n                    addr\\n                )\\n            )\\n        );\\n\\n        if (\\n            !SignatureChecker.isValidSignatureNow(\\n                data.claimer,\\n                messageHashClaimer,\\n                data.sigClaimer\\n            )\\n        ) {\\n            revert InvalidClaimerSignature();\\n        }\\n\\n        return true;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {IERC721Enumerable} from \\\"./IERC721Enumerable.sol\\\";\\nimport {IERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds enumerability\\n * of all the token ids in the contract as well as all token ids owned by each account.\\n *\\n * CAUTION: `ERC721` extensions that implement custom `balanceOf` logic, such as `ERC721Consecutive`,\\n * interfere with enumerability and should not be used together with `ERC721Enumerable`.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    mapping(address owner => mapping(uint256 index => uint256)) private _ownedTokens;\\n    mapping(uint256 tokenId => uint256) private _ownedTokensIndex;\\n\\n    uint256[] private _allTokens;\\n    mapping(uint256 tokenId => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev An `owner`'s token query was out of bounds for `index`.\\n     *\\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\\n     */\\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\\n\\n    /**\\n     * @dev Batch mint is not allowed.\\n     */\\n    error ERC721EnumerableForbiddenBatchMint();\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\\n        if (index >= balanceOf(owner)) {\\n            revert ERC721OutOfBoundsIndex(owner, index);\\n        }\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\\n        if (index >= totalSupply()) {\\n            revert ERC721OutOfBoundsIndex(address(0), index);\\n        }\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_update}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\\n        address previousOwner = super._update(to, tokenId, auth);\\n\\n        if (previousOwner == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n\\n        return previousOwner;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = balanceOf(to) - 1;\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = balanceOf(from);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\\n     */\\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\\n        if (amount > 0) {\\n            revert ERC721EnumerableForbiddenBatchMint();\\n        }\\n        super._increaseBalance(account, amount);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/PackNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\n\\n/**\\n * @title PackNFT\\n * @dev This contract inherits from ERC721 and ERC721Enumerable. It represents a Pack NFT and includes functions for minting, revoking and opening packs.\\n */\\ncontract PackNFT is ERC721, ERC721Enumerable {\\n    //\\n    // ----------- Enumerations ---------------\\n    /**\\n     * @dev Represents the state of a Pack\\n     * Empty: Indicates that the pack has not been minted yet\\n     * Created: Indicates that the pack is newly minted and not yet opened or revoked\\n     * Opened: Indicates that the pack has been opened by a claimer\\n     * Revoked: Indicates that the pack has been revoked by the owner\\n     */\\n    enum PackState {\\n        Empty,\\n        Created,\\n        Opened,\\n        Revoked\\n    }\\n\\n    // ---------- Storage --------------------\\n    uint256 private _nextTokenId;\\n    string private _baseTokenURI;\\n\\n    mapping(uint256 => PackState) public packState;\\n    mapping(uint256 => string) public packStateURIs;\\n\\n    // Store creation block number for each token\\n    mapping(uint256 => uint256) public creationBlock;\\n\\n    /**\\n     * @dev Constructor for the PackNFT contract\\n     * @param baseTokenURI_ The base URI for the token\\n     * @param name_ The name of the token\\n     * @param symbol_ The symbol of the token\\n     */\\n    constructor(\\n        string memory baseTokenURI_,\\n        string memory name_,\\n        string memory symbol_\\n    ) ERC721(name_, symbol_) {\\n        _baseTokenURI = baseTokenURI_;\\n\\n        // Initialize the mapping\\n        packStateURIs[uint(PackState.Created)] = \\\"created\\\";\\n        packStateURIs[uint(PackState.Opened)] = \\\"opened\\\";\\n        packStateURIs[uint(PackState.Revoked)] = \\\"revoked\\\";\\n    }\\n\\n    /**\\n     * @dev Internal function to mint a pack and set its state to Created\\n     * @param to The address to mint the pack to\\n     * @return tokenId The ID of the newly minted pack\\n     */\\n    function _mintPack(address to) internal returns (uint256 tokenId) {\\n        tokenId = _nextTokenId++;\\n        _safeMint(to, tokenId);\\n\\n        // Set state to Created\\n        packState[tokenId] = PackState.Created;\\n\\n        // Set creation block number\\n        creationBlock[tokenId] = block.number;\\n    }\\n\\n    /**\\n     * @dev Internal function to revoke a pack and set its state to Revoked\\n     * @param tokenId The ID of the pack to revoke\\n     */\\n    function _revokePack(uint256 tokenId) internal {\\n        _burn(tokenId);\\n\\n        // Set state to Revoked\\n        packState[tokenId] = PackState.Revoked;\\n    }\\n\\n    /**\\n     * @dev Internal function to open a pack and set its state to Opened\\n     * @param tokenId The ID of the pack to open\\n     */\\n    function _openPack(uint256 tokenId) internal {\\n        // Set state to Opened\\n        packState[tokenId] = PackState.Opened;\\n    }\\n\\n    /**\\n     * @dev Function to get the URI of a token based on its state\\n     * @param tokenId The ID of the token\\n     * @return The URI of the token\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view override returns (string memory) {\\n        // Get state of the Pack\\n        PackState state = packState[tokenId];\\n\\n        // Check if the state exists in the mapping\\n        string memory stateURI = packStateURIs[uint(state)];\\n        require(bytes(stateURI).length > 0, \\\"PackdMain: invalid state\\\");\\n\\n        // Return the URI based on the state of the Pack\\n        return string(abi.encodePacked(_baseURI(), stateURI));\\n    }\\n\\n    /**\\n     * @dev Function to get the base URI of the token\\n     * @return The base URI of the token\\n     */\\n    function _baseURI() internal view override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    /**\\n     * @dev Internal function to update the state of a token\\n     * @param to The address to update the token to\\n     * @param tokenId The ID of the token\\n     * @param auth The address authorized to update the token\\n     * @return The address of the updated token\\n     */\\n    function _update(\\n        address to,\\n        uint256 tokenId,\\n        address auth\\n    ) internal override(ERC721, ERC721Enumerable) returns (address) {\\n        return super._update(to, tokenId, auth);\\n    }\\n\\n    /**\\n     * @dev Internal function to increase the balance of an account\\n     * @param account The address of the account\\n     * @param value The amount to increase the balance by\\n     */\\n    function _increaseBalance(\\n        address account,\\n        uint128 value\\n    ) internal override(ERC721, ERC721Enumerable) {\\n        super._increaseBalance(account, value);\\n    }\\n\\n    /**\\n     * @dev Function to check if the contract supports an interface\\n     * @param interfaceId The ID of the interface\\n     * @return A boolean indicating whether the contract supports the interface\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(ERC721, ERC721Enumerable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"}}}","address":"0x5AEeDc64647270e8a84aDC95A532699F5A3F93B1","bytecode":"","deployedBytecode":"0x60806040526004361061020f5760003560e01c806370a0823111610118578063bfa0b133116100a0578063d48c94a81161006f578063d48c94a814610823578063e985e9c514610854578063f2fde38b14610891578063fa757b9a146108ba578063ffa1ad74146108e35761020f565b8063bfa0b13314610753578063c26d20d31461077e578063c87b56dd146107bb578063d3f43c78146107f85761020f565b806395d89b41116100e757806395d89b4114610670578063a22cb4651461069b578063a25c4aef146106c4578063b2ddcab4146106ed578063b88d4fde1461072a5761020f565b806370a08231146105c6578063715018a6146106035780637b1039991461061a5780638da5cb5b146106455761020f565b80632dd7c6581161019b5780634f5e74c21161016a5780634f5e74c2146104bb5780634f6ccce7146104f85780635c184796146105355780635c60da1b1461055e5780636352211e146105895761020f565b80632dd7c658146103db5780632f745c59146104185780633664cd3f1461045557806342842e0e146104925761020f565b806318160ddd116101e257806318160ddd146102e257806318e3ab571461030d57806322e06ae01461033857806323b872dd14610375578063275e0a881461039e5761020f565b806301ffc9a71461021457806306fdde0314610251578063081812fc1461027c578063095ea7b3146102b9575b600080fd5b34801561022057600080fd5b5061023b60048036038101906102369190613c23565b61090e565b6040516102489190613c6b565b60405180910390f35b34801561025d57600080fd5b50610266610920565b6040516102739190613d16565b60405180910390f35b34801561028857600080fd5b506102a3600480360381019061029e9190613d6e565b6109b2565b6040516102b09190613ddc565b60405180910390f35b3480156102c557600080fd5b506102e060048036038101906102db9190613e23565b6109ce565b005b3480156102ee57600080fd5b506102f76109e4565b6040516103049190613e72565b60405180910390f35b34801561031957600080fd5b506103226109f1565b60405161032f9190613e72565b60405180910390f35b34801561034457600080fd5b5061035f600480360381019061035a9190613d6e565b610a15565b60405161036c9190613d16565b60405180910390f35b34801561038157600080fd5b5061039c60048036038101906103979190613e8d565b610ab5565b005b3480156103aa57600080fd5b506103c560048036038101906103c09190613ee0565b610bb7565b6040516103d29190613ddc565b60405180910390f35b3480156103e757600080fd5b5061040260048036038101906103fd9190613d6e565b610c05565b60405161040f9190613ddc565b60405180910390f35b34801561042457600080fd5b5061043f600480360381019061043a9190613e23565b610d10565b60405161044c9190613e72565b60405180910390f35b34801561046157600080fd5b5061047c60048036038101906104779190613d6e565b610db9565b6040516104899190613f97565b60405180910390f35b34801561049e57600080fd5b506104b960048036038101906104b49190613e8d565b610dd9565b005b3480156104c757600080fd5b506104e260048036038101906104dd9190613d6e565b610df9565b6040516104ef9190613e72565b60405180910390f35b34801561050457600080fd5b5061051f600480360381019061051a9190613d6e565b610e11565b60405161052c9190613e72565b60405180910390f35b34801561054157600080fd5b5061055c60048036038101906105579190614017565b610e87565b005b34801561056a57600080fd5b506105736111c7565b6040516105809190613ddc565b60405180910390f35b34801561059557600080fd5b506105b060048036038101906105ab9190613d6e565b6111eb565b6040516105bd9190613ddc565b60405180910390f35b3480156105d257600080fd5b506105ed60048036038101906105e89190614077565b6111fd565b6040516105fa9190613e72565b60405180910390f35b34801561060f57600080fd5b506106186112b7565b005b34801561062657600080fd5b5061062f6112cb565b60405161063c9190614103565b60405180910390f35b34801561065157600080fd5b5061065a6112ef565b6040516106679190613ddc565b60405180910390f35b34801561067c57600080fd5b50610685611319565b6040516106929190613d16565b60405180910390f35b3480156106a757600080fd5b506106c260048036038101906106bd919061414a565b6113ab565b005b3480156106d057600080fd5b506106eb60048036038101906106e691906142c8565b6113c1565b005b3480156106f957600080fd5b50610714600480360381019061070f9190613d6e565b61145e565b6040516107219190613ddc565b60405180910390f35b34801561073657600080fd5b50610751600480360381019061074c91906143d9565b611491565b005b34801561075f57600080fd5b506107686114ae565b6040516107759190613e72565b60405180910390f35b34801561078a57600080fd5b506107a560048036038101906107a09190614077565b6114d2565b6040516107b29190613c6b565b60405180910390f35b3480156107c757600080fd5b506107e260048036038101906107dd9190613d6e565b6114f2565b6040516107ef9190613d16565b60405180910390f35b34801561080457600080fd5b5061080d611641565b60405161081a9190613e72565b60405180910390f35b61083d600480360381019061083891906144b2565b611646565b60405161084b929190614559565b60405180910390f35b34801561086057600080fd5b5061087b60048036038101906108769190614582565b611b52565b6040516108889190613c6b565b60405180910390f35b34801561089d57600080fd5b506108b860048036038101906108b39190614077565b611be6565b005b3480156108c657600080fd5b506108e160048036038101906108dc91906146a4565b611c6c565b005b3480156108ef57600080fd5b506108f8611f02565b6040516109059190613e72565b60405180910390f35b600061091982611f07565b9050919050565b60606000805461092f9061474f565b80601f016020809104026020016040519081016040528092919081815260200182805461095b9061474f565b80156109a85780601f1061097d576101008083540402835291602001916109a8565b820191906000526020600020905b81548152906001019060200180831161098b57829003601f168201915b5050505050905090565b60006109bd82611f81565b506109c782612009565b9050919050565b6109e082826109db612046565b61204e565b5050565b6000600880549050905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b600d6020528060005260406000206000915090508054610a349061474f565b80601f0160208091040260200160405190810160405280929190818152602001828054610a609061474f565b8015610aad5780601f10610a8257610100808354040283529160200191610aad565b820191906000526020600020905b815481529060010190602001808311610a9057829003601f168201915b505050505081565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b275760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401610b1e9190613ddc565b60405180910390fd5b6000610b3b8383610b36612046565b612060565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610bb1578382826040517f64283d7b000000000000000000000000000000000000000000000000000000008152600401610ba893929190614780565b60405180910390fd5b50505050565b60116020528160005260406000208181548110610bd357600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635e9bc5367f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000030867f00000000000000000000000000000000000000000000000000000000000000006040518663ffffffff1660e01b8152600401610cc89594939291906147b7565b602060405180830381865afa158015610ce5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d09919061481f565b9050919050565b6000610d1b836111fd565b8210610d605782826040517fa57d13dc000000000000000000000000000000000000000000000000000000008152600401610d5792919061484c565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b600c6020528060005260406000206000915054906101000a900460ff1681565b610df483838360405180602001604052806000815250611491565b505050565b600e6020528060005260406000206000915090505481565b6000610e1b6109e4565b8210610e61576000826040517fa57d13dc000000000000000000000000000000000000000000000000000000008152600401610e5892919061484c565b60405180910390fd5b60088281548110610e7557610e74614875565b5b90600052602060002001549050919050565b823373ffffffffffffffffffffffffffffffffffffffff16610ea8826111eb565b73ffffffffffffffffffffffffffffffffffffffff1614610f0057806040517fcd5e32e2000000000000000000000000000000000000000000000000000000008152600401610ef79190613e72565b60405180910390fd5b836001806003811115610f1657610f15613f20565b5b600c600084815260200190815260200160002060009054906101000a900460ff166003811115610f4957610f48613f20565b5b14610f8b57816040517ff7453f0b000000000000000000000000000000000000000000000000000000008152600401610f829190613e72565b60405180910390fd5b60116000878152602001908152602001600020805490508585905014611003576011600087815260200190815260200160002080549050858590506040517f4fb53a3c000000000000000000000000000000000000000000000000000000008152600401610ffa9291906148a4565b60405180910390fd5b61100c86612076565b600061101787610c05565b905060008173ffffffffffffffffffffffffffffffffffffffff163190506110408233836120be565b60005b601160008a81526020019081526020016000208054905081101561118457611170601160008b8152602001908152602001600020828154811061108957611088614875565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a858b8b868181106110c9576110c8614875565b5b90506020028101906110db91906148dc565b6040516024016110ee949392919061499e565b6040516020818303038152906040527ff37e724e000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506121e1565b50808061117c90614a0d565b915050611043565b50877f3ed29fb64fa945b8356199704a51c1da5e7717064a5848e693f31c84fc6c806e336040516111b59190613ddc565b60405180910390a25050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006111f682611f81565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112705760006040517f89c62b640000000000000000000000000000000000000000000000000000000081526004016112679190613ddc565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6112bf612265565b6112c960006122ec565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546113289061474f565b80601f01602080910402602001604051908101604052809291908181526020018280546113549061474f565b80156113a15780601f10611376576101008083540402835291602001916113a1565b820191906000526020600020905b81548152906001019060200180831161138457829003601f168201915b5050505050905090565b6113bd6113b6612046565b83836123b2565b5050565b6113c9612265565b60005b82518110156114595781601260008584815181106113ed576113ec614875565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550808061145190614a0d565b9150506113cc565b505050565b60106020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61149c848484610ab5565b6114a884848484612521565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60126020528060005260406000206000915054906101000a900460ff1681565b60606000600c600084815260200190815260200160002060009054906101000a900460ff1690506000600d600083600381111561153257611531613f20565b5b8152602001908152602001600020805461154b9061474f565b80601f01602080910402602001604051908101604052809291908181526020018280546115779061474f565b80156115c45780601f10611599576101008083540402835291602001916115c4565b820191906000526020600020905b8154815290600101906020018083116115a757829003601f168201915b50505050509050600081511161160f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160690614aa1565b60405180910390fd5b6116176126d8565b81604051602001611629929190614afd565b60405160208183030381529060405292505050919050565b600081565b60008060005b86869050811015611746576012600088888481811061166e5761166d614875565b5b90506020020160208101906116839190614077565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611733578686828181106116e2576116e1614875565b5b90506020020160208101906116f79190614077565b6040517f486c037400000000000000000000000000000000000000000000000000000000815260040161172a9190613ddc565b60405180910390fd5b808061173e90614a0d565b91505061164c565b508383905086869050146117995785859050848490506040517f4fb53a3c0000000000000000000000000000000000000000000000000000000081526004016117909291906148a4565b60405180910390fd5b600034036117d3576040517f715a6e9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6117dc8861276a565b9150866010600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508585601160008581526020019081526020016000209190611852929190613afa565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663da7323b37f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000030867f00000000000000000000000000000000000000000000000000000000000000006040518663ffffffff1660e01b8152600401611914959493929190614b47565b6020604051808303816000875af1158015611933573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611957919061481f565b905060008173ffffffffffffffffffffffffffffffffffffffff163460405161197f90614bdb565b60006040518083038185875af1925050503d80600081146119bc576040519150601f19603f3d011682016040523d82523d6000602084013e6119c1565b606091505b50509050806119fc576040517f6747a28800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b87879050811015611b0557611af1888883818110611a2057611a1f614875565b5b9050602002016020810190611a359190614077565b8585898986818110611a4a57611a49614875565b5b9050602002810190611a5c91906148dc565b604051602401611a6f9493929190614bf0565b6040516020818303038152906040527fc56d786e000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506121e1565b508080611afd90614a0d565b9150506119ff565b50827fe271f0bfd48981060c91facb315d1aac41e5ef90698ffbc1e5886dbc6dd86ec58a89898989604051611b3e959493929190614e57565b60405180910390a250965096945050505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611bee612265565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611c605760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401611c579190613ddc565b60405180910390fd5b611c69816122ec565b50565b82600001516001806003811115611c8657611c85613f20565b5b600c600084815260200190815260200160002060009054906101000a900460ff166003811115611cb957611cb8613f20565b5b14611cfb57816040517ff7453f0b000000000000000000000000000000000000000000000000000000008152600401611cf29190613e72565b60405180910390fd5b611d04856127e8565b8460a0015185608001511115611d46576040517f25fef44e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611d538560000151612870565b60005b601160008760000151815260200190815260200160002080549050811015611eb557611ea160116000886000015181526020019081526020016000208281548110611da457611da3614875565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168760000151611de18960000151610c05565b8960400151898987818110611df957611df8614875565b5b9050602002810190611e0b91906148dc565b604051602401611e1f959493929190614ea0565b6040516020818303038152906040527f15a3966f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506121e1565b508080611ead90614a0d565b915050611d56565b50611ebf856128af565b84600001517f86ed3e19f8d5b64492a8aa542a0268f79413b19b2f76dcff5b71469d603444e633604051611ef39190613ddc565b60405180910390a25050505050565b600181565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611f7a5750611f79826128ff565b5b9050919050565b600080611f8d836129e1565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361200057826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611ff79190613e72565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b61205b8383836001612a1e565b505050565b600061206d848484612be3565b90509392505050565b61207f81612d00565b6003600c600083815260200190815260200160002060006101000a81548160ff021916908360038111156120b6576120b5613f20565b5b021790555050565b600082826040516024016120d392919061484c565b6040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090508373ffffffffffffffffffffffffffffffffffffffff166374420f4c84848460006040518563ffffffff1660e01b81526004016121929493929190614f32565b6000604051808303816000875af11580156121b1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906121da9190614fee565b5050505050565b60606000808473ffffffffffffffffffffffffffffffffffffffff168460405161220b9190615068565b600060405180830381855af49150503d8060008114612246576040519150601f19603f3d011682016040523d82523d6000602084013e61224b565b606091505b509150915061225b858383612d86565b9250505092915050565b61226d612046565b73ffffffffffffffffffffffffffffffffffffffff1661228b6112ef565b73ffffffffffffffffffffffffffffffffffffffff16146122ea576122ae612046565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016122e19190613ddc565b60405180910390fd5b565b6000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361242357816040517f5b08ba1800000000000000000000000000000000000000000000000000000000815260040161241a9190613ddc565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516125149190613c6b565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b11156126d2578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02612565612046565b8685856040518563ffffffff1660e01b8152600401612587949392919061507f565b6020604051808303816000875af19250505080156125c357506040513d601f19601f820116820180604052508101906125c091906150e0565b60015b612647573d80600081146125f3576040519150601f19603f3d011682016040523d82523d6000602084013e6125f8565b606091505b50600081510361263f57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016126369190613ddc565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146126d057836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016126c79190613ddc565b60405180910390fd5b505b50505050565b6060600b80546126e79061474f565b80601f01602080910402602001604051908101604052809291908181526020018280546127139061474f565b80156127605780601f1061273557610100808354040283529160200191612760565b820191906000526020600020905b81548152906001019060200180831161274357829003601f168201915b5050505050905090565b6000600a600081548092919061277f90614a0d565b91905055905061278f8282612e15565b6001600c600083815260200190815260200160002060006101000a81548160ff021916908360038111156127c6576127c5613f20565b5b021790555043600e600083815260200190815260200160002081905550919050565b61286c817f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000030601060008760000151815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612e33565b5050565b6002600c600083815260200190815260200160002060006101000a81548160ff021916908360038111156128a7576128a6613f20565b5b021790555050565b60006128be8260000151610c05565b90506128cf813384608001516120be565b60008173ffffffffffffffffffffffffffffffffffffffff163190506128fa828460400151836120be565b505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806129ca57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806129da57506129d982612f57565b5b9050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8080612a575750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15612b8b576000612a6784611f81565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015612ad257508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015612ae55750612ae38184611b52565b155b15612b2757826040517fa9fbf51f000000000000000000000000000000000000000000000000000000008152600401612b1e9190613ddc565b60405180910390fd5b8115612b8957838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600080612bf1858585612fc1565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612c3557612c30846131db565b612c74565b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614612c7357612c728185613224565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603612cb657612cb184613385565b612cf5565b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614612cf457612cf38585613456565b5b5b809150509392505050565b6000612d0f6000836000612060565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612d8257816040517f7e273289000000000000000000000000000000000000000000000000000000008152600401612d799190613e72565b60405180910390fd5b5050565b606082612d9b57612d96826134e1565b612e0d565b60008251148015612dc3575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15612e0557836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401612dfc9190613ddc565b60405180910390fd5b819050612e0e565b5b9392505050565b612e2f828260405180602001604052806000815250613526565b5050565b600080612e7587600001518860400151888888604051602001612e5a959493929190615176565b60405160208183030381529060405280519060200120613542565b9050612e8683828960200151613578565b612ebc576040517f38a85a8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000612efd88600001518960a00151898989604051602001612ee29594939291906151d5565b60405160208183030381529060405280519060200120613542565b9050612f128860400151828a60600151613578565b612f48576040517f36ae61d500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60019250505095945050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080612fcd846129e1565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461300f5761300e818486613608565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146130a057613051600085600080612a1e565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614613123576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b600061322f836111fd565b9050600060076000848152602001908152602001600020549050818114613314576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016008805490506133999190615234565b90506000600960008481526020019081526020016000205490506000600883815481106133c9576133c8614875565b5b9060005260206000200154905080600883815481106133eb576133ea614875565b5b90600052602060002001819055508160096000838152602001908152602001600020819055506009600085815260200190815260200160002060009055600880548061343a57613439615268565b5b6001900381819060005260206000200160009055905550505050565b60006001613463846111fd565b61346d9190615234565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b6000815111156134f45780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61353083836136cc565b61353d6000848484612521565b505050565b60007f19457468657265756d205369676e6564204d6573736167653a0a33320000000060005281601c52603c6000209050919050565b600080600061358785856137c5565b5091509150600060038111156135a05761359f613f20565b5b8160038111156135b3576135b2613f20565b5b1480156135eb57508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b806135fd57506135fc868686613821565b5b925050509392505050565b613613838383613945565b6136c757600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361368857806040517f7e27328900000000000000000000000000000000000000000000000000000000815260040161367f9190613e72565b60405180910390fd5b81816040517f177e802f0000000000000000000000000000000000000000000000000000000081526004016136be92919061484c565b60405180910390fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361373e5760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016137359190613ddc565b60405180910390fd5b600061374c83836000612060565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146137c05760006040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526004016137b79190613ddc565b60405180910390fd5b505050565b6000806000604184510361380a5760008060006020870151925060408701519150606087015160001a90506137fc88828585613a06565b95509550955050505061381a565b60006002855160001b9250925092505b9250925092565b60008060008573ffffffffffffffffffffffffffffffffffffffff1685856040516024016138509291906152b0565b604051602081830303815290604052631626ba7e60e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516138a29190615068565b600060405180830381855afa9150503d80600081146138dd576040519150601f19603f3d011682016040523d82523d6000602084013e6138e2565b606091505b50915091508180156138f657506020815110155b801561393a5750631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681806020019051810190613938919061530c565b145b925050509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156139fd57508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806139be57506139bd8484611b52565b5b806139fc57508273ffffffffffffffffffffffffffffffffffffffff166139e483612009565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b60008060007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08460001c1115613a46576000600385925092509250613af0565b600060018888888860405160008152602001604052604051613a6b9493929190615355565b6020604051602081039080840390855afa158015613a8d573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603613ae157600060016000801b93509350935050613af0565b8060008060001b935093509350505b9450945094915050565b828054828255906000526020600020908101928215613b89579160200282015b82811115613b8857823573ffffffffffffffffffffffffffffffffffffffff168260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190613b1a565b5b509050613b969190613b9a565b5090565b5b80821115613bb3576000816000905550600101613b9b565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613c0081613bcb565b8114613c0b57600080fd5b50565b600081359050613c1d81613bf7565b92915050565b600060208284031215613c3957613c38613bc1565b5b6000613c4784828501613c0e565b91505092915050565b60008115159050919050565b613c6581613c50565b82525050565b6000602082019050613c806000830184613c5c565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613cc0578082015181840152602081019050613ca5565b60008484015250505050565b6000601f19601f8301169050919050565b6000613ce882613c86565b613cf28185613c91565b9350613d02818560208601613ca2565b613d0b81613ccc565b840191505092915050565b60006020820190508181036000830152613d308184613cdd565b905092915050565b6000819050919050565b613d4b81613d38565b8114613d5657600080fd5b50565b600081359050613d6881613d42565b92915050565b600060208284031215613d8457613d83613bc1565b5b6000613d9284828501613d59565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613dc682613d9b565b9050919050565b613dd681613dbb565b82525050565b6000602082019050613df16000830184613dcd565b92915050565b613e0081613dbb565b8114613e0b57600080fd5b50565b600081359050613e1d81613df7565b92915050565b60008060408385031215613e3a57613e39613bc1565b5b6000613e4885828601613e0e565b9250506020613e5985828601613d59565b9150509250929050565b613e6c81613d38565b82525050565b6000602082019050613e876000830184613e63565b92915050565b600080600060608486031215613ea657613ea5613bc1565b5b6000613eb486828701613e0e565b9350506020613ec586828701613e0e565b9250506040613ed686828701613d59565b9150509250925092565b60008060408385031215613ef757613ef6613bc1565b5b6000613f0585828601613d59565b9250506020613f1685828601613d59565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110613f6057613f5f613f20565b5b50565b6000819050613f7182613f4f565b919050565b6000613f8182613f63565b9050919050565b613f9181613f76565b82525050565b6000602082019050613fac6000830184613f88565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112613fd757613fd6613fb2565b5b8235905067ffffffffffffffff811115613ff457613ff3613fb7565b5b6020830191508360208202830111156140105761400f613fbc565b5b9250929050565b6000806000604084860312156140305761402f613bc1565b5b600061403e86828701613d59565b935050602084013567ffffffffffffffff81111561405f5761405e613bc6565b5b61406b86828701613fc1565b92509250509250925092565b60006020828403121561408d5761408c613bc1565b5b600061409b84828501613e0e565b91505092915050565b6000819050919050565b60006140c96140c46140bf84613d9b565b6140a4565b613d9b565b9050919050565b60006140db826140ae565b9050919050565b60006140ed826140d0565b9050919050565b6140fd816140e2565b82525050565b600060208201905061411860008301846140f4565b92915050565b61412781613c50565b811461413257600080fd5b50565b6000813590506141448161411e565b92915050565b6000806040838503121561416157614160613bc1565b5b600061416f85828601613e0e565b925050602061418085828601614135565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6141c282613ccc565b810181811067ffffffffffffffff821117156141e1576141e061418a565b5b80604052505050565b60006141f4613bb7565b905061420082826141b9565b919050565b600067ffffffffffffffff8211156142205761421f61418a565b5b602082029050602081019050919050565b600061424461423f84614205565b6141ea565b9050808382526020820190506020840283018581111561426757614266613fbc565b5b835b81811015614290578061427c8882613e0e565b845260208401935050602081019050614269565b5050509392505050565b600082601f8301126142af576142ae613fb2565b5b81356142bf848260208601614231565b91505092915050565b600080604083850312156142df576142de613bc1565b5b600083013567ffffffffffffffff8111156142fd576142fc613bc6565b5b6143098582860161429a565b925050602061431a85828601614135565b9150509250929050565b600080fd5b600067ffffffffffffffff8211156143445761434361418a565b5b61434d82613ccc565b9050602081019050919050565b82818337600083830152505050565b600061437c61437784614329565b6141ea565b90508281526020810184848401111561439857614397614324565b5b6143a384828561435a565b509392505050565b600082601f8301126143c0576143bf613fb2565b5b81356143d0848260208601614369565b91505092915050565b600080600080608085870312156143f3576143f2613bc1565b5b600061440187828801613e0e565b945050602061441287828801613e0e565b935050604061442387828801613d59565b925050606085013567ffffffffffffffff81111561444457614443613bc6565b5b614450878288016143ab565b91505092959194509250565b60008083601f84011261447257614471613fb2565b5b8235905067ffffffffffffffff81111561448f5761448e613fb7565b5b6020830191508360208202830111156144ab576144aa613fbc565b5b9250929050565b600080600080600080608087890312156144cf576144ce613bc1565b5b60006144dd89828a01613e0e565b96505060206144ee89828a01613e0e565b955050604087013567ffffffffffffffff81111561450f5761450e613bc6565b5b61451b89828a0161445c565b9450945050606087013567ffffffffffffffff81111561453e5761453d613bc6565b5b61454a89828a01613fc1565b92509250509295509295509295565b600060408201905061456e6000830185613e63565b61457b6020830184613dcd565b9392505050565b6000806040838503121561459957614598613bc1565b5b60006145a785828601613e0e565b92505060206145b885828601613e0e565b9150509250929050565b600080fd5b600080fd5b600060c082840312156145e2576145e16145c2565b5b6145ec60c06141ea565b905060006145fc84828501613d59565b600083015250602082013567ffffffffffffffff8111156146205761461f6145c7565b5b61462c848285016143ab565b602083015250604061464084828501613e0e565b604083015250606082013567ffffffffffffffff811115614664576146636145c7565b5b614670848285016143ab565b606083015250608061468484828501613d59565b60808301525060a061469884828501613d59565b60a08301525092915050565b6000806000604084860312156146bd576146bc613bc1565b5b600084013567ffffffffffffffff8111156146db576146da613bc6565b5b6146e7868287016145cc565b935050602084013567ffffffffffffffff81111561470857614707613bc6565b5b61471486828701613fc1565b92509250509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061476757607f821691505b60208210810361477a57614779614720565b5b50919050565b60006060820190506147956000830186613dcd565b6147a26020830185613e63565b6147af6040830184613dcd565b949350505050565b600060a0820190506147cc6000830188613dcd565b6147d96020830187613e63565b6147e66040830186613dcd565b6147f36060830185613e63565b6148006080830184613e63565b9695505050505050565b60008151905061481981613df7565b92915050565b60006020828403121561483557614834613bc1565b5b60006148438482850161480a565b91505092915050565b60006040820190506148616000830185613dcd565b61486e6020830184613e63565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506148b96000830185613e63565b6148c66020830184613e63565b9392505050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126148f9576148f86148cd565b5b80840192508235915067ffffffffffffffff82111561491b5761491a6148d2565b5b602083019250600182023603831315614937576149366148d7565b5b509250929050565b600061494a82613d9b565b9050919050565b61495a8161493f565b82525050565b600082825260208201905092915050565b600061497d8385614960565b935061498a83858461435a565b61499383613ccc565b840190509392505050565b60006060820190506149b36000830187613e63565b6149c06020830186614951565b81810360408301526149d3818486614971565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614a1882613d38565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614a4a57614a496149de565b5b600182019050919050565b7f5061636b644d61696e3a20696e76616c69642073746174650000000000000000600082015250565b6000614a8b601883613c91565b9150614a9682614a55565b602082019050919050565b60006020820190508181036000830152614aba81614a7e565b9050919050565b600081905092915050565b6000614ad782613c86565b614ae18185614ac1565b9350614af1818560208601613ca2565b80840191505092915050565b6000614b098285614acc565b9150614b158284614acc565b91508190509392505050565b50565b6000614b31600083614960565b9150614b3c82614b21565b600082019050919050565b600060c082019050614b5c6000830188613dcd565b614b696020830187613e63565b614b766040830186613dcd565b614b836060830185613e63565b614b906080830184613e63565b81810360a0830152614ba181614b24565b90509695505050505050565b600081905092915050565b6000614bc5600083614bad565b9150614bd082614b21565b600082019050919050565b6000614be682614bb8565b9150819050919050565b6000606082019050614c056000830187613e63565b614c126020830186613dcd565b8181036040830152614c25818486614971565b905095945050505050565b600082825260208201905092915050565b6000819050919050565b614c5481613dbb565b82525050565b6000614c668383614c4b565b60208301905092915050565b6000614c816020840184613e0e565b905092915050565b6000602082019050919050565b6000614ca28385614c30565b9350614cad82614c41565b8060005b85811015614ce657614cc38284614c72565b614ccd8882614c5a565b9750614cd883614c89565b925050600181019050614cb1565b5085925050509392505050565b600082825260208201905092915050565b6000819050919050565b600082825260208201905092915050565b6000614d2b8385614d0e565b9350614d3883858461435a565b614d4183613ccc565b840190509392505050565b6000614d59848484614d1f565b90509392505050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112614d8e57614d8d614d6c565b5b83810192508235915060208301925067ffffffffffffffff821115614db657614db5614d62565b5b600182023603831315614dcc57614dcb614d67565b5b509250929050565b6000602082019050919050565b6000614ded8385614cf3565b935083602084028501614dff84614d04565b8060005b87811015614e45578484038952614e1a8284614d71565b614e25868284614d4c565b9550614e3084614dd4565b935060208b019a505050600181019050614e03565b50829750879450505050509392505050565b6000606082019050614e6c6000830188613dcd565b8181036020830152614e7f818688614c96565b90508181036040830152614e94818486614de1565b90509695505050505050565b6000608082019050614eb56000830188613e63565b614ec26020830187613dcd565b614ecf6040830186613dcd565b8181036060830152614ee2818486614971565b90509695505050505050565b600081519050919050565b6000614f0482614eee565b614f0e8185614960565b9350614f1e818560208601613ca2565b614f2781613ccc565b840191505092915050565b6000608082019050614f476000830187613dcd565b614f546020830186613e63565b8181036040830152614f668185614ef9565b9050614f756060830184613e63565b95945050505050565b6000614f91614f8c84614329565b6141ea565b905082815260208101848484011115614fad57614fac614324565b5b614fb8848285613ca2565b509392505050565b600082601f830112614fd557614fd4613fb2565b5b8151614fe5848260208601614f7e565b91505092915050565b60006020828403121561500457615003613bc1565b5b600082015167ffffffffffffffff81111561502257615021613bc6565b5b61502e84828501614fc0565b91505092915050565b600061504282614eee565b61504c8185614bad565b935061505c818560208601613ca2565b80840191505092915050565b60006150748284615037565b915081905092915050565b60006080820190506150946000830187613dcd565b6150a16020830186613dcd565b6150ae6040830185613e63565b81810360608301526150c08184614ef9565b905095945050505050565b6000815190506150da81613bf7565b92915050565b6000602082840312156150f6576150f5613bc1565b5b6000615104848285016150cb565b91505092915050565b6000819050919050565b61512861512382613d38565b61510d565b82525050565b60008160601b9050919050565b60006151468261512e565b9050919050565b60006151588261513b565b9050919050565b61517061516b82613dbb565b61514d565b82525050565b60006151828288615117565b602082019150615192828761515f565b6014820191506151a28286615117565b6020820191506151b28285615117565b6020820191506151c2828461515f565b6014820191508190509695505050505050565b60006151e18288615117565b6020820191506151f18287615117565b6020820191506152018286615117565b6020820191506152118285615117565b602082019150615221828461515f565b6014820191508190509695505050505050565b600061523f82613d38565b915061524a83613d38565b9250828203905081811115615262576152616149de565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000819050919050565b6152aa81615297565b82525050565b60006040820190506152c560008301856152a1565b81810360208301526152d78184614ef9565b90509392505050565b6152e981615297565b81146152f457600080fd5b50565b600081519050615306816152e0565b92915050565b60006020828403121561532257615321613bc1565b5b6000615330848285016152f7565b91505092915050565b600060ff82169050919050565b61534f81615339565b82525050565b600060808201905061536a60008301876152a1565b6153776020830186615346565b61538460408301856152a1565b61539160608301846152a1565b9594505050505056fea2646970667358221220879f1892f6ac2b7cff23dbe62ff7d214cac75218f24445e892db9b3c4b7b4b3764736f6c63430008140033","abi":[{"inputs":[{"internalType":"address","name":"initialOwner_","type":"address"},{"internalType":"string","name":"baseTokenURI_","type":"string"},{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"},{"internalType":"address","name":"registry_","type":"address"},{"internalType":"address","name":"implementation_","type":"address"},{"internalType":"uint256","name":"registryChainId_","type":"uint256"},{"internalType":"uint256","name":"salt_","type":"uint256"},{"internalType":"address[]","name":"modulesWhitelist_","type":"address[]"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[],"name":"ERC721EnumerableForbiddenBatchMint","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"ERC721OutOfBoundsIndex","type":"error"},{"inputs":[],"name":"EtherTransferFailed","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"},{"inputs":[],"name":"InvalidAddress","type":"error"},{"inputs":[],"name":"InvalidClaimerSignature","type":"error"},{"inputs":[],"name":"InvalidEthValue","type":"error"},{"inputs":[{"internalType":"uint256","name":"modulesLength","type":"uint256"},{"internalType":"uint256","name":"moduleDataLength","type":"uint256"}],"name":"InvalidLengthOfData","type":"error"},{"inputs":[],"name":"InvalidOwnerSignature","type":"error"},{"inputs":[],"name":"InvalidRefundValue","type":"error"},{"inputs":[{"internalType":"address","name":"modules","type":"address"}],"name":"ModulesNotWhitelisted","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"OnlyOwnerOf","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"TokenNotInExpectedState","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"address[]","name":"modules","type":"address[]"},{"indexed":false,"internalType":"bytes[]","name":"moduleData","type":"bytes[]"}],"name":"PackCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"address","name":"claimer","type":"address"}],"name":"PackOpened","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"address","name":"owner","type":"address"}],"name":"PackRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"CALL_OPERATION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"VERSION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"account","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"claimPublicKey","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"creationBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"modulesWhitelist","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"sigOwner","type":"bytes"},{"internalType":"address","name":"claimer","type":"address"},{"internalType":"bytes","name":"sigClaimer","type":"bytes"},{"internalType":"uint256","name":"refundValue","type":"uint256"},{"internalType":"uint256","name":"maxRefundValue","type":"uint256"}],"internalType":"struct ClaimData","name":"data","type":"tuple"},{"internalType":"bytes[]","name":"moduleData","type":"bytes[]"}],"name":"open","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to_","type":"address"},{"internalType":"address","name":"claimPublicKey_","type":"address"},{"internalType":"address[]","name":"modules","type":"address[]"},{"internalType":"bytes[]","name":"moduleData","type":"bytes[]"}],"name":"pack","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"newAccount","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"packModules","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"packState","outputs":[{"internalType":"enum PackNFT.PackState","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"packStateURIs","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"registry","outputs":[{"internalType":"contract IERC6551Registry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"registryChainId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId_","type":"uint256"},{"internalType":"bytes[]","name":"moduleData","type":"bytes[]"}],"name":"revoke","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"salt","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"modules","type":"address[]"},{"internalType":"bool","name":"value","type":"bool"}],"name":"setModulesWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}]}