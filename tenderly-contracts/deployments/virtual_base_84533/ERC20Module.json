{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.20\"},\"sources\":{\"contracts/modules/ERC20Module.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IERC6551Executable.sol\\\";\\n\\nimport \\\"../interfaces/IPackModule.sol\\\";\\n\\n/**\\n * @title ERC20Module\\n * @dev This contract is a module for handling ERC20 tokens in packs.\\n */\\ncontract ERC20Module is IPackModule {\\n    //\\n    uint256 public constant CALL_OPERATION = 0; // Only call operations are supported for ERC6551\\n    uint256 public constant CALL_VALUE = 0; // No value is sent with the call\\n\\n    /**\\n     * @dev Struct to hold data for tokens on creation of a pack.\\n     * @param tokenAddress The address of the ERC20 token.\\n     * @param amount The amount of the token to be included in the pack.\\n     */\\n    struct OnCreateData {\\n        address tokenAddress;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @dev Struct to hold data for tokens on revocation of a pack.\\n     * @param tokenAddress The address of the ERC20 token.\\n     */\\n    struct OnRevokeData {\\n        address tokenAddress;\\n    }\\n\\n    /**\\n     * @dev Struct to hold data for tokens on claim of a pack.\\n     * @param tokenAddress The address of the ERC20 token.\\n     */\\n    struct OnClaimData {\\n        address tokenAddress;\\n    }\\n\\n    // Lifecycle functions\\n    /**\\n     * @dev Function to handle token transfers on creation of a pack.\\n     * @param account The address of the account creating the pack.\\n     * @param additionalData The data for the tokens to be included in the pack.\\n     */\\n    function onCreate(\\n        uint256 /* tokenId */,\\n        address account,\\n        bytes calldata additionalData\\n    ) external payable override {\\n        // unpack data\\n        OnCreateData[] memory tokensData = abi.decode(\\n            additionalData,\\n            (OnCreateData[])\\n        );\\n        // Iterate over the array of TokenData objects\\n        for (uint256 i = 0; i < tokensData.length; i++) {\\n            OnCreateData memory tokenData = tokensData[i];\\n\\n            SafeERC20.safeTransferFrom(\\n                IERC20(tokenData.tokenAddress),\\n                msg.sender,\\n                account,\\n                tokenData.amount\\n            );\\n        }\\n\\n        return;\\n    }\\n\\n    /**\\n     * @dev Function to handle token transfers on opening of a pack.\\n     * @param account The address of the account opening the pack.\\n     * @param claimer The address of the account claiming the pack.\\n     * @param additionalData The data for the tokens to be claimed from the pack.\\n     */\\n    function onOpen(\\n        uint256 /* tokenId */,\\n        address account,\\n        address claimer,\\n        bytes calldata additionalData\\n    ) external override {\\n        // unpack data\\n        OnClaimData[] memory tokensData = abi.decode(\\n            additionalData,\\n            (OnClaimData[])\\n        );\\n\\n        // Iterate over the array of TokenData objects\\n        for (uint256 i = 0; i < tokensData.length; i++) {\\n            OnClaimData memory tokenData = tokensData[i];\\n\\n            uint256 balance = IERC20(tokenData.tokenAddress).balanceOf(account);\\n\\n            IERC6551Executable(payable(account)).execute(\\n                tokenData.tokenAddress,\\n                CALL_VALUE,\\n                abi.encodeWithSignature(\\n                    \\\"transfer(address,uint256)\\\",\\n                    claimer,\\n                    balance\\n                ),\\n                CALL_OPERATION\\n            );\\n        }\\n\\n        return;\\n    }\\n\\n    /**\\n     * @dev Function to handle token transfers on revocation of a pack.\\n     * @param account The address of the account revoking the pack.\\n     * @param additionalData The data for the tokens to be revoked from the pack.\\n     */\\n    function onRevoke(\\n        uint256 /* tokenId */,\\n        address account,\\n        bytes calldata additionalData\\n    ) external override {\\n        // unpack data\\n        OnRevokeData[] memory tokensData = abi.decode(\\n            additionalData,\\n            (OnRevokeData[])\\n        );\\n\\n        // Iterate over the array of TokenData objects\\n        for (uint256 i = 0; i < tokensData.length; i++) {\\n            OnRevokeData memory tokenData = tokensData[i];\\n\\n            uint256 balance = IERC20(tokenData.tokenAddress).balanceOf(account);\\n\\n            IERC6551Executable(payable(account)).execute(\\n                tokenData.tokenAddress,\\n                CALL_VALUE,\\n                abi.encodeWithSignature(\\n                    \\\"transfer(address,uint256)\\\",\\n                    msg.sender,\\n                    balance\\n                ),\\n                CALL_OPERATION\\n            );\\n        }\\n\\n        return;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/interfaces/IERC6551Executable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @dev the ERC-165 identifier for this interface is `0x74420f4c`\\ninterface IERC6551Executable {\\n    /**\\n     * @dev Executes a low-level operation if the caller is a valid signer on the account\\n     *\\n     * Reverts and bubbles up error if operation fails\\n     *\\n     * @param to        The target address of the operation\\n     * @param value     The Ether value to be sent to the target\\n     * @param data      The encoded operation calldata\\n     * @param operation A value indicating the type of operation to perform\\n     *\\n     * Accounts implementing this interface MUST accept the following operation parameter values:\\n     * - 0 = CALL\\n     * - 1 = DELEGATECALL\\n     * - 2 = CREATE\\n     * - 3 = CREATE2\\n     *\\n     * Accounts implementing this interface MAY support additional operations or restrict a signer's\\n     * ability to execute certain operations\\n     *\\n     * @return The result of the operation\\n     */\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        uint256 operation\\n    ) external payable returns (bytes memory);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/interfaces/IPackModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IPackModule {\\n    // Lifecycle functions\\n    function onCreate(\\n        uint256 tokenId,\\n        address account,\\n        bytes calldata additionalData\\n    ) external payable;\\n\\n    function onOpen(\\n        uint256 tokenId,\\n        address account,\\n        address claimer,\\n        bytes calldata additionalData\\n    ) external;\\n\\n    function onRevoke(\\n        uint256 tokenId,\\n        address account,\\n        bytes calldata additionalData\\n    ) external;\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"}}}","address":"0xA20aa0968C555cf984B52D530586108856a0A134","bytecode":"0x608060405234801561001057600080fd5b5061131a806100206000396000f3fe60806040526004361061004a5760003560e01c806315a3966f1461004f5780631d19868814610078578063c56d786e146100a3578063d3f43c78146100bf578063f37e724e146100ea575b600080fd5b34801561005b57600080fd5b506100766004803603810190610071919061095d565b610113565b005b34801561008457600080fd5b5061008d61030e565b60405161009a91906109f4565b60405180910390f35b6100bd60048036038101906100b89190610a0f565b610313565b005b3480156100cb57600080fd5b506100d4610381565b6040516100e191906109f4565b60405180910390f35b3480156100f657600080fd5b50610111600480360381019061010c9190610a0f565b610386565b005b600082828101906101249190610c13565b905060005b815181101561030557600082828151811061014757610146610c5c565b5b602002602001015190506000816000015173ffffffffffffffffffffffffffffffffffffffff166370a08231896040518263ffffffff1660e01b81526004016101909190610c9a565b602060405180830381865afa1580156101ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d19190610cca565b90508773ffffffffffffffffffffffffffffffffffffffff166374420f4c836000015160008a85604051602401610209929190610cf7565b6040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060006040518563ffffffff1660e01b81526004016102a79493929190610d9f565b6000604051808303816000875af11580156102c6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102ef9190610e91565b50505080806102fd90610f09565b915050610129565b50505050505050565b600081565b600082828101906103249190611064565b905060005b815181101561037957600082828151811061034757610346610c5c565b5b60200260200101519050610365816000015133888460200151610580565b50808061037190610f09565b915050610329565b505050505050565b600081565b6000828281019061039791906111ac565b905060005b81518110156105785760008282815181106103ba576103b9610c5c565b5b602002602001015190506000816000015173ffffffffffffffffffffffffffffffffffffffff166370a08231886040518263ffffffff1660e01b81526004016104039190610c9a565b602060405180830381865afa158015610420573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104449190610cca565b90508673ffffffffffffffffffffffffffffffffffffffff166374420f4c83600001516000338560405160240161047c929190610cf7565b6040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060006040518563ffffffff1660e01b815260040161051a9493929190610d9f565b6000604051808303816000875af1158015610539573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105629190610e91565b505050808061057090610f09565b91505061039c565b505050505050565b6105fc848573ffffffffffffffffffffffffffffffffffffffff166323b872dd8686866040516024016105b5939291906111f5565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610602565b50505050565b600061062d828473ffffffffffffffffffffffffffffffffffffffff1661069990919063ffffffff16565b905060008151141580156106525750808060200190518101906106509190611264565b155b1561069457826040517f5274afe700000000000000000000000000000000000000000000000000000000815260040161068b9190610c9a565b60405180910390fd5b505050565b60606106a7838360006106af565b905092915050565b6060814710156106f657306040517fcd7860590000000000000000000000000000000000000000000000000000000081526004016106ed9190610c9a565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16848660405161071f91906112cd565b60006040518083038185875af1925050503d806000811461075c576040519150601f19603f3d011682016040523d82523d6000602084013e610761565b606091505b509150915061077186838361077c565b925050509392505050565b6060826107915761078c8261080b565b610803565b600082511480156107b9575060008473ffffffffffffffffffffffffffffffffffffffff163b145b156107fb57836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016107f29190610c9a565b60405180910390fd5b819050610804565b5b9392505050565b60008151111561081e5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61087781610864565b811461088257600080fd5b50565b6000813590506108948161086e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108c58261089a565b9050919050565b6108d5816108ba565b81146108e057600080fd5b50565b6000813590506108f2816108cc565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261091d5761091c6108f8565b5b8235905067ffffffffffffffff81111561093a576109396108fd565b5b60208301915083600182028301111561095657610955610902565b5b9250929050565b6000806000806000608086880312156109795761097861085a565b5b600061098788828901610885565b9550506020610998888289016108e3565b94505060406109a9888289016108e3565b935050606086013567ffffffffffffffff8111156109ca576109c961085f565b5b6109d688828901610907565b92509250509295509295909350565b6109ee81610864565b82525050565b6000602082019050610a0960008301846109e5565b92915050565b60008060008060608587031215610a2957610a2861085a565b5b6000610a3787828801610885565b9450506020610a48878288016108e3565b935050604085013567ffffffffffffffff811115610a6957610a6861085f565b5b610a7587828801610907565b925092505092959194509250565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610acc82610a83565b810181811067ffffffffffffffff82111715610aeb57610aea610a94565b5b80604052505050565b6000610afe610850565b9050610b0a8282610ac3565b919050565b600067ffffffffffffffff821115610b2a57610b29610a94565b5b602082029050602081019050919050565b600080fd5b600060208284031215610b5657610b55610b3b565b5b610b606020610af4565b90506000610b70848285016108e3565b60008301525092915050565b6000610b8f610b8a84610b0f565b610af4565b90508083825260208201905060208402830185811115610bb257610bb1610902565b5b835b81811015610bdb5780610bc78882610b40565b845260208401935050602081019050610bb4565b5050509392505050565b600082601f830112610bfa57610bf96108f8565b5b8135610c0a848260208601610b7c565b91505092915050565b600060208284031215610c2957610c2861085a565b5b600082013567ffffffffffffffff811115610c4757610c4661085f565b5b610c5384828501610be5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b610c94816108ba565b82525050565b6000602082019050610caf6000830184610c8b565b92915050565b600081519050610cc48161086e565b92915050565b600060208284031215610ce057610cdf61085a565b5b6000610cee84828501610cb5565b91505092915050565b6000604082019050610d0c6000830185610c8b565b610d1960208301846109e5565b9392505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d5a578082015181840152602081019050610d3f565b60008484015250505050565b6000610d7182610d20565b610d7b8185610d2b565b9350610d8b818560208601610d3c565b610d9481610a83565b840191505092915050565b6000608082019050610db46000830187610c8b565b610dc160208301866109e5565b8181036040830152610dd38185610d66565b9050610de260608301846109e5565b95945050505050565b600080fd5b600067ffffffffffffffff821115610e0b57610e0a610a94565b5b610e1482610a83565b9050602081019050919050565b6000610e34610e2f84610df0565b610af4565b905082815260208101848484011115610e5057610e4f610deb565b5b610e5b848285610d3c565b509392505050565b600082601f830112610e7857610e776108f8565b5b8151610e88848260208601610e21565b91505092915050565b600060208284031215610ea757610ea661085a565b5b600082015167ffffffffffffffff811115610ec557610ec461085f565b5b610ed184828501610e63565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f1482610864565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610f4657610f45610eda565b5b600182019050919050565b600067ffffffffffffffff821115610f6c57610f6b610a94565b5b602082029050602081019050919050565b600060408284031215610f9357610f92610b3b565b5b610f9d6040610af4565b90506000610fad848285016108e3565b6000830152506020610fc184828501610885565b60208301525092915050565b6000610fe0610fdb84610f51565b610af4565b9050808382526020820190506040840283018581111561100357611002610902565b5b835b8181101561102c57806110188882610f7d565b845260208401935050604081019050611005565b5050509392505050565b600082601f83011261104b5761104a6108f8565b5b813561105b848260208601610fcd565b91505092915050565b60006020828403121561107a5761107961085a565b5b600082013567ffffffffffffffff8111156110985761109761085f565b5b6110a484828501611036565b91505092915050565b600067ffffffffffffffff8211156110c8576110c7610a94565b5b602082029050602081019050919050565b6000602082840312156110ef576110ee610b3b565b5b6110f96020610af4565b90506000611109848285016108e3565b60008301525092915050565b6000611128611123846110ad565b610af4565b9050808382526020820190506020840283018581111561114b5761114a610902565b5b835b81811015611174578061116088826110d9565b84526020840193505060208101905061114d565b5050509392505050565b600082601f830112611193576111926108f8565b5b81356111a3848260208601611115565b91505092915050565b6000602082840312156111c2576111c161085a565b5b600082013567ffffffffffffffff8111156111e0576111df61085f565b5b6111ec8482850161117e565b91505092915050565b600060608201905061120a6000830186610c8b565b6112176020830185610c8b565b61122460408301846109e5565b949350505050565b60008115159050919050565b6112418161122c565b811461124c57600080fd5b50565b60008151905061125e81611238565b92915050565b60006020828403121561127a5761127961085a565b5b60006112888482850161124f565b91505092915050565b600081905092915050565b60006112a782610d20565b6112b18185611291565b93506112c1818560208601610d3c565b80840191505092915050565b60006112d9828461129c565b91508190509291505056fea2646970667358221220a58783b4f27f45a30c69b5afb0cb6de4f039245b303ece78c858b3c38f0bc3cf64736f6c63430008140033","deployedBytecode":"0x60806040526004361061004a5760003560e01c806315a3966f1461004f5780631d19868814610078578063c56d786e146100a3578063d3f43c78146100bf578063f37e724e146100ea575b600080fd5b34801561005b57600080fd5b506100766004803603810190610071919061095d565b610113565b005b34801561008457600080fd5b5061008d61030e565b60405161009a91906109f4565b60405180910390f35b6100bd60048036038101906100b89190610a0f565b610313565b005b3480156100cb57600080fd5b506100d4610381565b6040516100e191906109f4565b60405180910390f35b3480156100f657600080fd5b50610111600480360381019061010c9190610a0f565b610386565b005b600082828101906101249190610c13565b905060005b815181101561030557600082828151811061014757610146610c5c565b5b602002602001015190506000816000015173ffffffffffffffffffffffffffffffffffffffff166370a08231896040518263ffffffff1660e01b81526004016101909190610c9a565b602060405180830381865afa1580156101ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d19190610cca565b90508773ffffffffffffffffffffffffffffffffffffffff166374420f4c836000015160008a85604051602401610209929190610cf7565b6040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060006040518563ffffffff1660e01b81526004016102a79493929190610d9f565b6000604051808303816000875af11580156102c6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102ef9190610e91565b50505080806102fd90610f09565b915050610129565b50505050505050565b600081565b600082828101906103249190611064565b905060005b815181101561037957600082828151811061034757610346610c5c565b5b60200260200101519050610365816000015133888460200151610580565b50808061037190610f09565b915050610329565b505050505050565b600081565b6000828281019061039791906111ac565b905060005b81518110156105785760008282815181106103ba576103b9610c5c565b5b602002602001015190506000816000015173ffffffffffffffffffffffffffffffffffffffff166370a08231886040518263ffffffff1660e01b81526004016104039190610c9a565b602060405180830381865afa158015610420573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104449190610cca565b90508673ffffffffffffffffffffffffffffffffffffffff166374420f4c83600001516000338560405160240161047c929190610cf7565b6040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060006040518563ffffffff1660e01b815260040161051a9493929190610d9f565b6000604051808303816000875af1158015610539573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105629190610e91565b505050808061057090610f09565b91505061039c565b505050505050565b6105fc848573ffffffffffffffffffffffffffffffffffffffff166323b872dd8686866040516024016105b5939291906111f5565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610602565b50505050565b600061062d828473ffffffffffffffffffffffffffffffffffffffff1661069990919063ffffffff16565b905060008151141580156106525750808060200190518101906106509190611264565b155b1561069457826040517f5274afe700000000000000000000000000000000000000000000000000000000815260040161068b9190610c9a565b60405180910390fd5b505050565b60606106a7838360006106af565b905092915050565b6060814710156106f657306040517fcd7860590000000000000000000000000000000000000000000000000000000081526004016106ed9190610c9a565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16848660405161071f91906112cd565b60006040518083038185875af1925050503d806000811461075c576040519150601f19603f3d011682016040523d82523d6000602084013e610761565b606091505b509150915061077186838361077c565b925050509392505050565b6060826107915761078c8261080b565b610803565b600082511480156107b9575060008473ffffffffffffffffffffffffffffffffffffffff163b145b156107fb57836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016107f29190610c9a565b60405180910390fd5b819050610804565b5b9392505050565b60008151111561081e5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61087781610864565b811461088257600080fd5b50565b6000813590506108948161086e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108c58261089a565b9050919050565b6108d5816108ba565b81146108e057600080fd5b50565b6000813590506108f2816108cc565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261091d5761091c6108f8565b5b8235905067ffffffffffffffff81111561093a576109396108fd565b5b60208301915083600182028301111561095657610955610902565b5b9250929050565b6000806000806000608086880312156109795761097861085a565b5b600061098788828901610885565b9550506020610998888289016108e3565b94505060406109a9888289016108e3565b935050606086013567ffffffffffffffff8111156109ca576109c961085f565b5b6109d688828901610907565b92509250509295509295909350565b6109ee81610864565b82525050565b6000602082019050610a0960008301846109e5565b92915050565b60008060008060608587031215610a2957610a2861085a565b5b6000610a3787828801610885565b9450506020610a48878288016108e3565b935050604085013567ffffffffffffffff811115610a6957610a6861085f565b5b610a7587828801610907565b925092505092959194509250565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610acc82610a83565b810181811067ffffffffffffffff82111715610aeb57610aea610a94565b5b80604052505050565b6000610afe610850565b9050610b0a8282610ac3565b919050565b600067ffffffffffffffff821115610b2a57610b29610a94565b5b602082029050602081019050919050565b600080fd5b600060208284031215610b5657610b55610b3b565b5b610b606020610af4565b90506000610b70848285016108e3565b60008301525092915050565b6000610b8f610b8a84610b0f565b610af4565b90508083825260208201905060208402830185811115610bb257610bb1610902565b5b835b81811015610bdb5780610bc78882610b40565b845260208401935050602081019050610bb4565b5050509392505050565b600082601f830112610bfa57610bf96108f8565b5b8135610c0a848260208601610b7c565b91505092915050565b600060208284031215610c2957610c2861085a565b5b600082013567ffffffffffffffff811115610c4757610c4661085f565b5b610c5384828501610be5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b610c94816108ba565b82525050565b6000602082019050610caf6000830184610c8b565b92915050565b600081519050610cc48161086e565b92915050565b600060208284031215610ce057610cdf61085a565b5b6000610cee84828501610cb5565b91505092915050565b6000604082019050610d0c6000830185610c8b565b610d1960208301846109e5565b9392505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d5a578082015181840152602081019050610d3f565b60008484015250505050565b6000610d7182610d20565b610d7b8185610d2b565b9350610d8b818560208601610d3c565b610d9481610a83565b840191505092915050565b6000608082019050610db46000830187610c8b565b610dc160208301866109e5565b8181036040830152610dd38185610d66565b9050610de260608301846109e5565b95945050505050565b600080fd5b600067ffffffffffffffff821115610e0b57610e0a610a94565b5b610e1482610a83565b9050602081019050919050565b6000610e34610e2f84610df0565b610af4565b905082815260208101848484011115610e5057610e4f610deb565b5b610e5b848285610d3c565b509392505050565b600082601f830112610e7857610e776108f8565b5b8151610e88848260208601610e21565b91505092915050565b600060208284031215610ea757610ea661085a565b5b600082015167ffffffffffffffff811115610ec557610ec461085f565b5b610ed184828501610e63565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f1482610864565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610f4657610f45610eda565b5b600182019050919050565b600067ffffffffffffffff821115610f6c57610f6b610a94565b5b602082029050602081019050919050565b600060408284031215610f9357610f92610b3b565b5b610f9d6040610af4565b90506000610fad848285016108e3565b6000830152506020610fc184828501610885565b60208301525092915050565b6000610fe0610fdb84610f51565b610af4565b9050808382526020820190506040840283018581111561100357611002610902565b5b835b8181101561102c57806110188882610f7d565b845260208401935050604081019050611005565b5050509392505050565b600082601f83011261104b5761104a6108f8565b5b813561105b848260208601610fcd565b91505092915050565b60006020828403121561107a5761107961085a565b5b600082013567ffffffffffffffff8111156110985761109761085f565b5b6110a484828501611036565b91505092915050565b600067ffffffffffffffff8211156110c8576110c7610a94565b5b602082029050602081019050919050565b6000602082840312156110ef576110ee610b3b565b5b6110f96020610af4565b90506000611109848285016108e3565b60008301525092915050565b6000611128611123846110ad565b610af4565b9050808382526020820190506020840283018581111561114b5761114a610902565b5b835b81811015611174578061116088826110d9565b84526020840193505060208101905061114d565b5050509392505050565b600082601f830112611193576111926108f8565b5b81356111a3848260208601611115565b91505092915050565b6000602082840312156111c2576111c161085a565b5b600082013567ffffffffffffffff8111156111e0576111df61085f565b5b6111ec8482850161117e565b91505092915050565b600060608201905061120a6000830186610c8b565b6112176020830185610c8b565b61122460408301846109e5565b949350505050565b60008115159050919050565b6112418161122c565b811461124c57600080fd5b50565b60008151905061125e81611238565b92915050565b60006020828403121561127a5761127961085a565b5b60006112888482850161124f565b91505092915050565b600081905092915050565b60006112a782610d20565b6112b18185611291565b93506112c1818560208601610d3c565b80840191505092915050565b60006112d9828461129c565b91508190509291505056fea2646970667358221220a58783b4f27f45a30c69b5afb0cb6de4f039245b303ece78c858b3c38f0bc3cf64736f6c63430008140033","abi":[{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AddressInsufficientBalance","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"inputs":[],"name":"CALL_OPERATION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CALL_VALUE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes","name":"additionalData","type":"bytes"}],"name":"onCreate","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"claimer","type":"address"},{"internalType":"bytes","name":"additionalData","type":"bytes"}],"name":"onOpen","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes","name":"additionalData","type":"bytes"}],"name":"onRevoke","outputs":[],"stateMutability":"nonpayable","type":"function"}]}